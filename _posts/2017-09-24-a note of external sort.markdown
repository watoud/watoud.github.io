---
layout: post
title: 外部排序小记
date: 2017-09-24
comments: true
archive: true
tag: external sort
---
&emsp;&emsp;看《编程珠玑》第一章，里面谈到磁盘文件排序，对这个问题不怎么了解，于是到网上搜索了一把，在wiki上看到了一篇有关外部排序（external sort）的文章，简要记录一下。
### 什么是外部排序
> External sorting is required when the data being sorted do not fit into the main memory of a computing device (usually RAM) and instead they must reside in the slower external memory, usually a hard disk drive.

&emsp;&emsp;上面摘自wiki，外部排序需要排序的数据没法直接一次性加载到内存，相反大部分数据都只能存储在更慢的外部存储介质上，比如常见的磁盘。外部排序比较典型的就是采用排序-归并算法，首先把需要排序的数据分块，每块都能够加载到内存中，并对每一个数据块进行排序，接着对排好序的块进行归并。

### 外部排序示例
> 使用100M的内存对900M的数据进行排序  

排序步骤如下：
1. 读取100M数据到内存，并使用传统的内存排序算法进行排序，比如快排
2. 把排好序的数据写到磁盘
3. 重复1、2两个步骤，直到所有需要排序的数据都已经分成一个个有序的数据块，本例中刚好生成9个100M的有序数据块
4. 从9个数据块中分别读取最前面的10M数据到内存缓存中，把内存还剩下的10M数据作为输出缓存使用
5. 对从各个数据块中读入的10M缓存数据进行多路归并排序，并把排序的结果放到输出缓存中，一旦输出缓存满了就写到磁盘上并清空。如果某一块对应的输入缓存已经空了则再次从该数据块读取10M数据直到该数据块全被读取。

&emsp;&emsp;上面的第1、2、3三个步骤比较好理解，下面主要看下第4、5步。  

&emsp;&emsp;第4步为什么从每个块读取10M数据而且留下10M数据作为输出缓存？做为归并排序，每次只需要读取每一个数据块的第一个元素进行比较操作就可以选出一个目标元素，但是频繁从磁盘读取数据操作太慢，所以一次就读取大量数据（10M）缓存到内存中，同样的每一轮选择出一个元素就往磁盘上写也太损耗性能，于是就缓存到足够多的数据（10M）再一次性写到磁盘上。 
 
&emsp;&emsp;第5步有个地方需要注意，一旦某个输入缓存空了就需要从对应的数据块中读入数据，而不是只对当前缓存起来的数据做归并排序，然后再读取下一轮数据再归并排序。

### 多趟归并
&emsp;&emsp;上面的例子中一趟归并就够了，但有些情况下，随着数据块越来越多，内存也将被拆分成更小的缓存块，这将导致从磁盘数据块中读取数据的次数大大增加。例如有50G的数据但是只有100M的内存时，使用一趟归并排序的效率就会比较低。数据首先被分成有序的500个数据块（每个100M），然后每次需要从500个数据块中各读取约200k的数据，这样会大大增大排序时间。这个时候我们可以考虑两趟归并排序。

1. 跟前面一样，把数据分块排序，共生成500个有序数据块，每个数据块100M
2. 第一趟归并，每次归并25个数据块，最后形成20个有序的更大的数据块，每个数据块2.5G
3. 对20个大的有序数据块进行第二趟归并排序

### 阅读资料
- https://en.wikipedia.org/wiki/External_sorting

